{"version":3,"sources":["Components/TodoTemplate.js","TodoContext.js","Components/TodoHead.js","Components/TodoItem.js","Components/TodoList.js","Components/TodoCreate.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","todoReducer","state","action","type","concat","todo","map","id","done","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","localData","localStorage","getItem","JSON","parse","dispatch","nextId","useRef","useEffect","setItem","stringify","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadeBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","CheckCircle","props","css","Text","TodoItemBlock","React","memo","text","onClick","TodoListBlock","TodoList","todos","key","CircleButton","button","open","InsertFormPosition","InsertForm","form","Input","input","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","console","log","placeholder","autoFocus","onChange","target","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f9361ae3.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n    width: 512px;\r\n    height: 768px;\r\n\r\n    position: relative;\r\n    background: white;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 8px rgba(0,0,0,.04);\r\n    margin: 96px auto 32px;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n`\r\n\r\nfunction TodoTemplate({ children }){\r\n    return(\r\n        <TodoTemplateBlock>\r\n                { children }\r\n        </TodoTemplateBlock>\r\n\r\n    )\r\n}\r\n\r\nexport default TodoTemplate;","import React, { useReducer, createContext, useContext, useRef, useEffect } from 'react';\r\n\r\nconst initialTodos = [\r\n  \r\n];\r\n\r\n\r\nfunction todoReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CREATE':\r\n      return state.concat(action.todo);\r\n    case 'TOGGLE':\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\r\n      );\r\n    case 'REMOVE':\r\n      return state.filter(todo => todo.id !== action.id);\r\n    default:\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n  }\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\n\r\nexport function TodoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos,()=>{\r\n    const localData = localStorage.getItem('TodoList');\r\n    return localData ? JSON.parse(localData) : []\r\n  });\r\n  const nextId = useRef(1);\r\n    useEffect(()=>{\r\n      localStorage.setItem('TodoList',JSON.stringify(state));\r\n  })\r\n\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoNextIdContext.Provider value={nextId}>\r\n          {children}\r\n        </TodoNextIdContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTodoState() {\r\n  const context = useContext(TodoStateContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n  const context = useContext(TodoDispatchContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoNextId() {\r\n  const context = useContext(TodoNextIdContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoHeadeBlock = styled.div`\r\n    padding: 48px 32px 24px;\r\n    border-bottom: 1px solid #e9ecef;\r\n    h1{\r\n        margin: 0;\r\n        font-size: 36px;\r\n        color: #343a40;\r\n    }\r\n    .day{\r\n        margin-top: 4px;\r\n        color: #868e96;\r\n        font-size: 21px;\r\n    }\r\n    .tasks-left{\r\n        margin-top: 40px;\r\n        color: #20c997;\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nfunction TodoHead(){\r\n    const todos = useTodoState(); \r\n    const undoneTasks = todos.filter(todo => !todo.done);\r\n    const today = new Date();\r\n    const dateString = today.toLocaleDateString('ko-KR',{\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n    })\r\n    const dayName = today.toLocaleDateString('ko-KR',{\r\n        weekday: 'long'\r\n    })\r\n    return(\r\n        <TodoHeadeBlock>\r\n            <h1>{dateString}</h1>\r\n            <div className=\"day\">{dayName}</div>\r\n            <div className=\"tasks-left\">할 일 { undoneTasks.length } 남음</div>\r\n        </TodoHeadeBlock>\r\n    )\r\n}\r\n\r\nexport default TodoHead","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md'\r\nimport { useTodoDispatch } from '../TodoContext';\r\n\r\n\r\n\r\nconst Remove = styled.div`\r\n    opacity:0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e6;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover{\r\n        color: #ff6b6b;\r\n    }\r\n`;\r\nconst CheckCircle = styled.div `\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 16px;\r\n    border: 1px solid #ced4da;\r\n    font-size: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 20px;\r\n    cursor: pointer;\r\n    ${props => props.done && css`\r\n        border: 1px solid #38d9a9;\r\n        color: #38d9a9;\r\n    `}\r\n`;\r\nconst Text = styled.div `\r\n    flex: 1;\r\n    font-size: 21px;\r\n    color: #495057;\r\n    ${props => props.done && css`\r\n        color: #ced4da;\r\n    `}\r\n`;\r\nconst TodoItemBlock = styled.div`\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 12px 0;\r\n    &:hover{\r\n        ${Remove}{\r\n            opacity:1;\r\n        }\r\n    }\r\n`\r\n\r\nfunction TodoItem({ id, done, text }){\r\n    const dispatch = useTodoDispatch();\r\n    const onToggle = () => dispatch({\r\n        type: 'TOGGLE',\r\n        id\r\n    })\r\n    const onRemove = () => dispatch({\r\n        type:'REMOVE',\r\n        id\r\n    })\r\n    return(\r\n        <TodoItemBlock>\r\n            <CheckCircle done={done} onClick={onToggle}>{done && <MdDone />}</CheckCircle>\r\n            <Text done={done}>{text}</Text>\r\n            <Remove onClick={onRemove}>\r\n                <MdDelete />\r\n            </Remove>\r\n        </TodoItemBlock>\r\n    )\r\n}\r\n\r\n\r\nexport default React.memo(TodoItem)","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px 48px;\r\n  overflow-y: auto;\r\n\r\n`\r\n\r\nfunction TodoList(){\r\n      \r\n    const todos = useTodoState();\r\n\r\n    return(\r\n        <TodoListBlock>\r\n            {todos.map(\r\n                todo => <TodoItem\r\n                key ={todo.id}\r\n                id={todo.id}\r\n                text={todo.text}\r\n                done={todo.done}\r\n                />\r\n            )\r\n\r\n            }\r\n        </TodoListBlock>\r\n\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React,{ useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\r\n\r\n\r\nconst CircleButton = styled.button`\r\n    background: #38d9a9;\r\n    &:hover{\r\n        background: #63e6be;\r\n    }\r\n    &:active{\r\n        background: #20c997;\r\n    }\r\n    z-index: 5;\r\n    cursor: pointer;\r\n    width: 80px;\r\n    height: 80px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0px;\r\n    transform: translate(-50%, 50%);\r\n    font-size:60px;\r\n    color : #fff;\r\n    border-radius: 40px;\r\n    border: none; \r\n    outline: none;\r\n    transition: all .125s ease-in;\r\n    ${props => props.open && css`\r\n     background: #ff6b6b;\r\n        &:hover{\r\n            background: #ff8787;\r\n        }\r\n        &:active{\r\n            background: #fa5252;\r\n        }\r\n        transform: translate(-50%, 50%) rotate(45deg);\r\n        `}\r\n`;\r\n\r\n\r\nconst InsertFormPosition = styled.div`\r\n        width: 100%;\r\n        bottom: 0;\r\n        left: 0;\r\n        position: absolute;\r\n\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n    \r\n    background: #f8f9fa;\r\n    padding: 32px 32px 72px;\r\n    border-bottom-left-radius: 16px;\r\n    border-bottom-right-radius: 16px;\r\n    border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input `\r\n    padding: 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid #dee2e6;\r\n    width: 100%;\r\n    outline: none;\r\n    font-size: 18px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nfunction TodoCreate(){\r\n    \r\n    const [ open, setOpen ] = useState(false);\r\n    const [value, setValue ] = useState('');\r\n    const dispatch = useTodoDispatch();\r\n    const nextId = useTodoNextId();\r\n\r\n    const onToggle = () => setOpen(!open);\r\n    const onChange = (e) => setValue(e.target.value);\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type:'CREATE',\r\n            todo:{\r\n                id:nextId.current,\r\n                text: value,\r\n                done: false,\r\n            }\r\n        });\r\n       \r\n        setValue('');\r\n        setOpen(false);   \r\n        nextId.current +=1;     \r\n        console.log(dispatch.todo)\r\n    }\r\n \r\n  \r\n\r\n  \r\n    \r\n    return(\r\n        <>\r\n        {open && <InsertFormPosition>\r\n            <InsertForm onSubmit={onSubmit}>\r\n                <Input \r\n                placeholder=\"할 일을 입력 후, Enter키를 눌러주세요\" \r\n                autoFocus\r\n                onChange={onChange}\r\n                value={value}\r\n                />\r\n            </InsertForm>\r\n            </InsertFormPosition>\r\n            }\r\n        <CircleButton open={open} onClick={onToggle}>\r\n            <MdAdd />\r\n        </CircleButton>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default React.memo(TodoCreate)","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './Components/TodoTemplate';\nimport TodoHead from './Components/TodoHead';\nimport TodoList from './Components/TodoList';\nimport TodoCreate from './Components/TodoCreate';\nimport { TodoProvider } from './TodoContext';\n\n\n\n\nconst GlobalStyle = createGlobalStyle`\n  body{\n    background:#e9ecef;\n  }\n`;\n\n \n\nfunction App(){\n  //  const localTodos = localStorage.TodoList;\n  //  useEffect(() => {\n  //    localStorage.getItem(localTodos);\n\n  //  })\n  return (\n  \n  <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCreate />\n      </TodoTemplate>\n  </TodoProvider>\n    \n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}